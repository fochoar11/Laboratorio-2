//Universidad del valle de Guatemala
//BE3029-Electronica Digital II
//Javier Ochoa - 23758
//Mcu: ESP32 dev kit
//Laboratorio #2

//Librerias

#include <Arduino.h>
#include <stdint.h>

// Pines de LEDs
#define LED_a 16     
#define LED_b 4     
#define LED_r 15    
#define LED_az 2

// Pines de botones
#define BTN1 19   // Avanzar (pull-down)
#define BTN2 18    // Retroceder (pull-up)
#define BTN3 21
// Contador, inicia en -1 para que no se encienda ningún LED al principio
int contando = -1;

// Variables para antirrebote
bool estadoAnteriorBTN1 = LOW;
bool estadoAnteriorBTN2 = HIGH;
bool estadoAnteriorBTN3 = HIGH;
unsigned long tiempoAnteriorBTN1 = 0;
unsigned long tiempoAnteriorBTN2 = 0;
const unsigned long retardoAntirrebote = 100; // milisegundos

void mostrarLED(int pos);

void setup() {
  // Configurar LEDs como salidas
  pinMode(LED_a, OUTPUT);
  pinMode(LED_b, OUTPUT);
  pinMode(LED_az, OUTPUT);
  pinMode(LED_r, OUTPUT);

  // Configurar botones como entradas con resistencias internas
  pinMode(BTN1, INPUT_PULLDOWN);  // Avanzar
  pinMode(BTN2, INPUT_PULLUP);    // Retroceder
  pinMode(BTN3, INPUT);
  // Al inicio, todos los LEDs están apagados
  mostrarLED(contando);
}

void loop() {
  unsigned long tiempo = millis();  // Tiempo actual para comparar con antirrebote

  // Leer botón 1 (avanzar)
  bool estadoActualBTN1 = digitalRead(BTN1);
  if (estadoActualBTN1 != estadoAnteriorBTN1 && estadoActualBTN1 == HIGH && (tiempo - tiempoAnteriorBTN1 > retardoAntirrebote)) {
    contando = (contando + 1) % 4;  // Avanza de 0 a 3
    mostrarLED(contando);
    tiempoAnteriorBTN1 = tiempo;
  }
  estadoAnteriorBTN1 = estadoActualBTN1;

  // Leer botón 2 (retroceder)
  bool estadoActualBTN2 = digitalRead(BTN2);
  if (estadoActualBTN2 != estadoAnteriorBTN2 && estadoActualBTN2 == LOW && (tiempo - tiempoAnteriorBTN2 > retardoAntirrebote)) {
    contando = (contando - 1 + 4) % 4;  // Retrocede de 3 a 0 circularmente
    mostrarLED(contando);
    tiempoAnteriorBTN2 = tiempo;
  }
  estadoAnteriorBTN2 = estadoActualBTN2;

  delay(10);  // Pequeño delay para estabilidad
}

// Función que apaga todos los LEDs y enciende solo uno según la posición
void mostrarLED(int pos) {
  // Apagar todos los LEDs
  digitalWrite(LED_a, LOW);
  digitalWrite(LED_b, LOW);
  digitalWrite(LED_az, LOW);
  digitalWrite(LED_r, LOW);

  // Encender el LED correspondiente si la posición es válida
  switch (pos) {
    case 0: digitalWrite(LED_a, HIGH); break;
    case 1: digitalWrite(LED_b, HIGH); break;
    case 2: digitalWrite(LED_az, HIGH); break;
    case 3: digitalWrite(LED_r, HIGH); break;
    default: break; // es para que si es -1 o inválido, no se enciende nada
  }
}


