//Universidad del valle de Guatemala
//BE3029 - Electrónica Digital II
//Javier Ochoa - 23758
//MCU: ESP32 Dev Kit
//Laboratorio #2

//Librerías
#include <Arduino.h>
#include <stdint.h>

// Pines de LEDs
#define LED_a 16      // LED amarillo
#define LED_b 4       // LED blanco
#define LED_r 15      // LED rojo
#define LED_az 2      // LED azul
//Las cambie
// Pines de botones
#define BTN1 19       // botón para avanzar
#define BTN2 18       // botón para retroceder
#define BTN3 21       // botón para cambiar de modo

// Variables
int contando = -1;       // lo puse en -1 para tener todos los LEDs apagados al inicio
int modo = 0;            // modo de visualización 

// Variables para antirrebote
bool estadoAnteriorBTN1 = LOW;     // ultimo estado leído del botón 1 (INPUT_PULLDOWN)
bool estadoAnteriorBTN2 = HIGH;    // ultimo estado leído del botón 2 (INPUT_PULLUP)
bool estadoAnteriorBTN3 = HIGH;    // ultimo estado leído del botón 3
unsigned long tiempoAnteriorBTN1 = 0; 
unsigned long tiempoAnteriorBTN2 = 0;
unsigned long tiempoAnteriorBTN3 = 0;
const unsigned long retardoAntirrebote = 100; // tiempo en ms de antirrebote

// prototipos de funciones
void mostrarLED(int pos);
void mostrarBinario(int numero);

void setup() {
  // configurar los pines de LEDs como salidas
  pinMode(LED_a, OUTPUT);
  pinMode(LED_b, OUTPUT);
  pinMode(LED_r, OUTPUT);
  pinMode(LED_az, OUTPUT);

  // configurar los pines de botones como entradas
  pinMode(BTN1, INPUT_PULLDOWN);  // avanza al presionar 
  pinMode(BTN2, INPUT_PULLUP);    // retrocede al presionar 
  pinMode(BTN3, INPUT);           // botón de modo 

  // mostrar el LED correspondiente al estado inicial, ahorita va ser apagado
  mostrarLED(contando);
}

void loop() {
  unsigned long tiempo = millis();  // guarda el tiempo actual para compararlo en antirrebotes

  //cambio de modo
  bool estadoActualBTN3 = digitalRead(BTN3);
  if (estadoActualBTN3 == LOW && estadoAnteriorBTN3 == HIGH && (tiempo - tiempoAnteriorBTN3 > retardoAntirrebote)) {
    modo = !modo;        // cambio de modo
    contando = 0;        // reinicia las leds cuando cambia el modo

    if (modo == 0) {
      mostrarLED(contando);        // modo secuencial
    } else {
      mostrarBinario(contando);    // modo binario
    }
    tiempoAnteriorBTN3 = tiempo;   // guarda el tiempo de este cambio
  }
  estadoAnteriorBTN3 = estadoActualBTN3;

  //avanza
  bool estadoActualBTN1 = digitalRead(BTN1);
  if (estadoActualBTN1 == HIGH && estadoAnteriorBTN1 == LOW && (tiempo - tiempoAnteriorBTN1 > retardoAntirrebote)) {
    if (modo == 0) {
      contando = (contando + 1) % 4;     // va de 0 a 3 porque son 4 LEDs
      mostrarLED(contando);
    } else {
      contando = (contando + 1) % 16;    // va de 0 y 15 para modo binario
      mostrarBinario(contando);
    }
    tiempoAnteriorBTN1 = tiempo;
  }
  estadoAnteriorBTN1 = estadoActualBTN1; // aca guarda el estado del boton para compararlo despues

  // regreso
  bool estadoActualBTN2 = digitalRead(BTN2);
  if (estadoActualBTN2 == LOW && estadoAnteriorBTN2 == HIGH && (tiempo - tiempoAnteriorBTN2 > retardoAntirrebote)) {
    if (modo == 0) {
      contando = (contando - 1 + 4) % 4;   // trayectoria circular que se asegura que este entre 0 y 3
      mostrarLED(contando);
    } else {
      contando = (contando - 1 + 16) % 16; //trayectoria circular que se asegura que este entre 0 y 15
      mostrarBinario(contando);
    }
    tiempoAnteriorBTN2 = tiempo;
  }
  estadoAnteriorBTN2 = estadoActualBTN2;

  delay(10); 
}

// funcion para que encienda una led dependiendo de que valor tiene
void mostrarLED(int pos) {
  // Apagar todos los LEDs primero
  digitalWrite(LED_a, LOW);
  digitalWrite(LED_b, LOW);
  digitalWrite(LED_az, LOW);
  digitalWrite(LED_r, LOW);

  // enciende solo el LED correspondiente
  switch (pos) {
    case 0: digitalWrite(LED_a, HIGH); break;
    case 1: digitalWrite(LED_b, HIGH); break;
    case 2: digitalWrite(LED_az, HIGH); break;
    case 3: digitalWrite(LED_r, HIGH); break;
    default: break;
  }
}

// funcion que tiene el numero binario y lo enciende a leds
void mostrarBinario(int numero) {
  // Apagar todos los LEDs primero
  digitalWrite(LED_a, LOW);
  digitalWrite(LED_b, LOW);
  digitalWrite(LED_az, LOW);
  digitalWrite(LED_r, LOW);

  // mostrar el numero
  switch (numero) {
    case 0: break;
    case 1: digitalWrite(LED_a, HIGH); break;
    case 2: digitalWrite(LED_b, HIGH); break;
    case 3: digitalWrite(LED_a, HIGH); digitalWrite(LED_b, HIGH); break;
    case 4: digitalWrite(LED_az, HIGH); break;
    case 5: digitalWrite(LED_a, HIGH); digitalWrite(LED_az, HIGH); break;
    case 6: digitalWrite(LED_b, HIGH); digitalWrite(LED_az, HIGH); break;
    case 7: digitalWrite(LED_a, HIGH); digitalWrite(LED_b, HIGH); digitalWrite(LED_az, HIGH); break;
    case 8: digitalWrite(LED_r, HIGH); break;
    case 9: digitalWrite(LED_a, HIGH); digitalWrite(LED_r, HIGH); break;
    case 10: digitalWrite(LED_b, HIGH); digitalWrite(LED_r, HIGH); break;
    case 11: digitalWrite(LED_a, HIGH); digitalWrite(LED_b, HIGH); digitalWrite(LED_r, HIGH); break;
    case 12: digitalWrite(LED_az, HIGH); digitalWrite(LED_r, HIGH); break;
    case 13: digitalWrite(LED_a, HIGH); digitalWrite(LED_az, HIGH); digitalWrite(LED_r, HIGH); break;
    case 14: digitalWrite(LED_b, HIGH); digitalWrite(LED_az, HIGH); digitalWrite(LED_r, HIGH); break;
    case 15: digitalWrite(LED_a, HIGH); digitalWrite(LED_b, HIGH); digitalWrite(LED_az, HIGH); digitalWrite(LED_r, HIGH); break;
    default: break;
  }
}
